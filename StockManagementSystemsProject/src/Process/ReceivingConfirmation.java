package Process;


import Log.Login;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.sql.ResultSetMetaData;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author 91979
 */
public class ReceivingConfirmation extends javax.swing.JFrame {
    private Connection con;
    private static PreparedStatement pst;
    private static ResultSet rs;
    private String name;
    private String userType;
    private int id;
    /**
     * Creates new form Admin
     */
    public ReceivingConfirmation() {
        initComponents();
        this.con = Login.connection();
        }
    
    public ReceivingConfirmation(String name, int id,String userType,Connection con) {
       initComponents();
       jUserId.setText(String.valueOf(id));
       jUserName.setText(name);
       this.con= con;
       this.name = name;
       this.userType = userType;
       this.id=id;
       loadTableAutomatic(userType);
       jbtnConfirm.setEnabled(false);
     }
        private void loadTableAutomatic(String userType){
       try {
            String sql= "select * from TransferTable where Reciving=?";
            pst = con.prepareStatement(sql);
            pst.setString(1, "Perfect Carry on");
            rs = pst.executeQuery();
            ResultSetMetaData rsm = rs.getMetaData();
            int c = rsm.getColumnCount();
            DefaultTableModel df = (DefaultTableModel)jtableProduct.getModel();
            df.setRowCount(0);
            while(rs.next()){
                Vector v = new Vector();
                for(int i=1;i<=c;i++){
                    v.add(rs.getString("tracking_id"));
                    v.add(rs.getString("Prod_Id"));
                    v.add(rs.getString("Prod_Name"));
                    v.add(rs.getString("Description"));
                    v.add(rs.getString("Costprice"));
                    v.add(rs.getString("RetailPrice"));
                    v.add(rs.getString("Qty"));
                    v.add(rs.getString("Quality"));
                    v.add(rs.getString("vehicleno"));
                    v.add(rs.getString("Reciving"));
                    v.add(rs.getString("Remarks"));
                }
                df.addRow(v);
            }
        }
        catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jUserId = new javax.swing.JLabel();
        jUserName = new javax.swing.JLabel();
        jbtnProduct = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jtableProduct = new javax.swing.JTable();
        jbtnConfirm = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 204, 204));
        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.setForeground(new java.awt.Color(51, 51, 255));

        jLabel1.setBackground(new java.awt.Color(0, 255, 204));
        jLabel1.setFont(new java.awt.Font("Showcard Gothic", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 51, 255));
        jLabel1.setText("view Transfer request Products");

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(153, 153, 255));
        jLabel2.setText("User Id");

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(153, 153, 255));
        jLabel3.setText("Name");

        jUserId.setBackground(new java.awt.Color(255, 204, 204));
        jUserId.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jUserId.setForeground(new java.awt.Color(153, 153, 255));
        jUserId.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jUserId.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jUserId.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jUserName.setBackground(new java.awt.Color(255, 204, 204));
        jUserName.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jUserName.setForeground(new java.awt.Color(153, 153, 255));
        jUserName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jUserName.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jUserName.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jbtnProduct.setBackground(new java.awt.Color(153, 204, 255));
        jbtnProduct.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jbtnProduct.setForeground(new java.awt.Color(0, 0, 255));
        jbtnProduct.setText("Back");
        jbtnProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnProductActionPerformed(evt);
            }
        });

        jtableProduct.setBackground(new java.awt.Color(51, 255, 204));
        jtableProduct.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jtableProduct.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jtableProduct.setForeground(new java.awt.Color(255, 153, 153));
        jtableProduct.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "TrackID", "Prod_ID", "Prod_Name", "Description", "Costprice", "RetailPrice", "Qty", "Quality", "Vehicle No", "Reciving", "Remarks"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jtableProduct.setGridColor(new java.awt.Color(102, 255, 255));
        jtableProduct.setSelectionBackground(new java.awt.Color(0, 255, 255));
        jtableProduct.setSelectionForeground(new java.awt.Color(0, 0, 255));
        jtableProduct.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtableProductjtableProductMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(jtableProduct);

        jbtnConfirm.setBackground(new java.awt.Color(153, 204, 255));
        jbtnConfirm.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jbtnConfirm.setForeground(new java.awt.Color(0, 0, 255));
        jbtnConfirm.setText("Confirm");
        jbtnConfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnConfirmActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jbtnProduct)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 350, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(237, 237, 237)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jUserId, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jUserName, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jbtnConfirm)
                .addGap(361, 361, 361))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(12, 12, 12)
                                .addComponent(jLabel3))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jUserId, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12)
                                .addComponent(jUserName, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jbtnProduct))))
                .addGap(12, 12, 12)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 397, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbtnConfirm)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
  private void checkUserType(String name, int id,String userType){
        System.gc();
        this.setVisible(false);
        switch (userType) {
            case "Admin" -> new Users.Admin(name,id,userType,con).setVisible(true);
            case "Receving" -> new Users.Receving(name,id,userType,con).setVisible(true);
            case "Quality" -> new Users.Quality(name,id,userType,con).setVisible(true);
            case "Vendor" -> new Users.Vendor(name,id,userType,con).setVisible(true);
            case "Billing" -> new Users.Billing(name,id,userType,con).setVisible(true);
            default -> JOptionPane.showMessageDialog(this, "Something went wrong");
        }
    }
    private void jbtnProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnProductActionPerformed
       checkUserType(name,id,userType);
    }//GEN-LAST:event_jbtnProductActionPerformed

    private void jtableProductjtableProductMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtableProductjtableProductMouseClicked
        if(0<jtableProduct.getSelectedColumn()){
         jbtnConfirm.setEnabled(true);
        }else{
         jbtnConfirm.setEnabled(false);
        }
    }//GEN-LAST:event_jtableProductjtableProductMouseClicked
        private int transferTableQty() throws SQLException{
            String query = "select * from TransferTable";
            pst = con.prepareStatement(query);
            rs = pst.executeQuery();
            int qty;
            if(rs.next()){
             qty = Integer.parseInt(rs.getString("Qty"));
            }else{
            qty=0;
            }
            return qty;
        }
    private void jbtnConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnConfirmActionPerformed
        DefaultTableModel df = (DefaultTableModel)jtableProduct.getModel();
        int selectedIndex = jtableProduct.getSelectedRow();
        if(0<=selectedIndex){
        String tracking_id =df.getValueAt(selectedIndex, 0).toString();
        String Prod_Id =df.getValueAt(selectedIndex, 1).toString();
        String Prod_Name =df.getValueAt(selectedIndex, 2).toString();
        String Description =df.getValueAt(selectedIndex, 3).toString();
        String Costprice =df.getValueAt(selectedIndex, 4).toString();
        String RetailPrice =df.getValueAt(selectedIndex, 5).toString();
        String Qty =df.getValueAt(selectedIndex, 6).toString();
        String Quality =df.getValueAt(selectedIndex, 7).toString();
        String vehicleno =df.getValueAt(selectedIndex, 8).toString();
        String Reciving =df.getValueAt(selectedIndex, 9).toString();
        String Remarks =df.getValueAt(selectedIndex, 10).toString();
                String query = "select * from StoreTable where tracking_id=? and Prod_Id = ?";
                try {
                    int transferQty = transferTableQty();
                    if(0<transferQty){
                    pst = con.prepareStatement(query);
                    pst.setString(1, tracking_id);
                    pst.setString(2, Prod_Id);
                    rs = pst.executeQuery();
                    if(rs.next()){
                        int TotalQty = Integer.parseInt(rs.getString("qty"))+Integer.parseInt(Qty);
                        String TotalQtyString = String.valueOf(TotalQty);
                        String sql = "Update StoreTable set Qty = ?,Reciving=? where tracking_id = ? and  Prod_Id= ? ";
                        pst = con.prepareStatement(sql);
                        pst.setString(1, TotalQtyString);
                        pst.setString(2, "GRN DONE");
                        pst.setString(3, tracking_id);
                        pst.setString(4, Prod_Id);
                        int counts = pst.executeUpdate();
                        if(0<counts){
                            sql = "delete from TransferTable where tracking_id = ? and  Prod_Id= ? ";
                            pst = con.prepareStatement(sql);
                            pst.setString(1, tracking_id);
                            pst.setString(2, Prod_Id);
                            int count = pst.executeUpdate();
                            if(count>0){
                                sql = "delete from RequestGRN where tracking_id=? and Prod_Id=?";
                                pst = con.prepareStatement(sql);
                                pst.setString(1, tracking_id);
                                pst.setString(2, Prod_Id); 
                                count =0;
                                count = pst.executeUpdate();
                            if(0<count){
                                JOptionPane.showMessageDialog(this, "Transfer Successfully");
                                loadTableAutomatic(userType);
                            }else{
                                JOptionPane.showMessageDialog(this, "something went wrong in RequestGRN");
                            }
                            }else{
                                JOptionPane.showMessageDialog(this, "something went wrong in RequestGRN");
                            }
                        }else{
                            JOptionPane.showMessageDialog(this, "something went wrong in Transfer exists");
                        }
                    }else{
                        String sql = "insert into StoreTable (tracking_id,Prod_Id,Prod_Name,Description,Costprice,RetailPrice,Qty,Quality,vehicleno,Reciving,Remarks)values(?,?,?,?,?,?,?,?,?,?,?)";
                        try {
                            pst = con.prepareStatement(sql);
                            pst.setString(1, tracking_id);
                            pst.setString(2, Prod_Id);
                            pst.setString(3, Prod_Name);
                            pst.setString(4, Description);
                            pst.setString(5, Costprice);
                            pst.setString(6, RetailPrice);
                            pst.setString(7, Qty);
                            pst.setString(8, Quality);
                            pst.setString(9, vehicleno);
                            pst.setString(10, "GRN DONE");
                            pst.setString(11, Remarks);
                            int count = pst.executeUpdate();
                            if(count>0){
                                sql = "delete from TransferTable where tracking_id = ? and  Prod_Id= ? ";
                                pst = con.prepareStatement(sql);
                                pst.setString(1, tracking_id);
                                pst.setString(2, Prod_Id);
                                int counts = pst.executeUpdate();
                                if(counts>0){
                                    sql = "delete from RequestGRN where tracking_id=? and Prod_Id=?";
                                    pst = con.prepareStatement(sql);
                                    pst.setString(1, tracking_id);
                                    pst.setString(2, Prod_Id); 
                                    count =0;
                                    count = pst.executeUpdate();
                                    if(0<count){
                                    JOptionPane.showMessageDialog(this, "Transfer Successfully");
                                     loadTableAutomatic(userType);
                                    }else{
                                             JOptionPane.showMessageDialog(this, "something went wrong in RequestGRN");
                                    }
                                }else{
                                    JOptionPane.showMessageDialog(this, "something went wrong in TransferTable");
                                }

                            }else{
                                JOptionPane.showMessageDialog(this, "something went wrong in Transfer");
                            }
                        } catch (SQLException ex) {
                            Logger.getLogger(VendorTransfers.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }else{
                     JOptionPane.showMessageDialog(this, "Qty"+transferTableQty());   
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(VendorTransfers.class.getName()).log(Level.SEVERE, null, ex);
                }
        }else{
            JOptionPane.showMessageDialog(this, "Please select any Row");
        }
    }//GEN-LAST:event_jbtnConfirmActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ReceivingConfirmation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ReceivingConfirmation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ReceivingConfirmation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ReceivingConfirmation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ReceivingConfirmation().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel jUserId;
    private javax.swing.JLabel jUserName;
    private javax.swing.JButton jbtnConfirm;
    private javax.swing.JButton jbtnProduct;
    private javax.swing.JTable jtableProduct;
    // End of variables declaration//GEN-END:variables
}
